// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Loyalty
import Foundation
import PWCore
import Swift
import UIKit
public struct Asset {
  public let balance: Swift.String
  public let iconUrl: Swift.String
  public let name: Swift.String
  public let conversionThreshold: Swift.String
}
public let serviceName: Swift.String
public let version: Swift.String
public var linkManager: Loyalty.LinkManager {
  get
}
public var assetManager: Loyalty.AssetManager {
  get
}
public enum Environment : Swift.String, Swift.CaseIterable {
  case prod
  case stage
  case dev
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [Loyalty.Environment]
  public static var allCases: [Loyalty.Environment] {
    get
  }
}
@_hasMissingDesignatedInitializers public class LogManager {
  public enum LogLevel : Swift.Int {
    case error
    case warning
    case info
    case debug
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public class func enableConsoleLogging(_ enable: Swift.Bool)
  public class func enableFileLogging(_ enable: Swift.Bool)
  public class func setLogLevel(_ logLevel: Loyalty.LogManager.LogLevel)
  public class func emailLogs()
  @objc deinit
}
public typealias BalanceCompletion = (Swift.Result<Loyalty.Asset, Swift.Error>) -> Swift.Void
public typealias FireEventCompletion = (Swift.Result<[Loyalty.SideEffect], Swift.Error>) -> Swift.Void
@_hasMissingDesignatedInitializers public class AssetManager {
  public func balance(completion: Loyalty.BalanceCompletion?)
  public func fireEvent(eventName: Swift.String, parameters: [Swift.String]?, completion: Loyalty.FireEventCompletion?)
  @objc deinit
}
public typealias LinkCompletion = (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void
@_hasMissingDesignatedInitializers public class LinkManager {
  public func linkUser(user: Swift.String, completion: Loyalty.LinkCompletion?)
  public func linkWallet(completion: Loyalty.LinkCompletion?)
  public func resetUser(completion: Loyalty.LinkCompletion?)
  @objc deinit
}
public struct SideEffect {
  public let text: Swift.String
  public let link: Swift.String?
}
extension Loyalty.Environment : Swift.Equatable {}
extension Loyalty.Environment : Swift.Hashable {}
extension Loyalty.Environment : Swift.RawRepresentable {}
extension Loyalty.LogManager.LogLevel : Swift.Equatable {}
extension Loyalty.LogManager.LogLevel : Swift.Hashable {}
extension Loyalty.LogManager.LogLevel : Swift.RawRepresentable {}
